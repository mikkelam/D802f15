#+DATE: \today
#+TITLE: aMI Handin assignments
#+AUTHOR: Sander Jespersen, Mathias Melgaard Andersen, Anders Roland Nielsen, \\ Andreas Berre Eriksen, Kent Munthe Caspersen \& Mikkel Alexander Madsen 
#+OPTIONS: toc:nil texht:t
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [colorlinks=true,linkcolor=blue]
#+LATEX_HEADER:\usepackage[top=1in,bottom=1in,left=1.2in,right=1.2in]{geometry}
#+LATEX_HEADER:\usepackage{pgf}
#+LATEX_HEADER:\usepackage{tikz}
#+LATEX_HEADER:\usetikzlibrary{arrows,automata}
#+LATEX_HEADER_EXTRA:

* Water tank 
** Baysian network
Indsæt figur fra Genie image.

** Suitable conditional probability distribution
Hvis ventil er åben fanger den stortset altid der er flow, hvis den er lukket laver den oftere fejl.


** Simulation
We assume that only the controller has access to the water level sensor, and thus we can not manually read the water level through the sensor.

* Matlab
** Forward-backward algorithm
The changes we did to the given code was as follows:
- In the HMM class we added a backwardMessages
- We initialised it to NaN when a HMM object was created
#+begin_src octave
backwardMessages;

function obj = HMM(priorModel, transModel, sensorModel)
  ...
  obj.backwardMessages = NaN;
end
#+end_src

The code below is our implementation of the backward part of the algorithm. The linebreak in the code is not present in the actual code but was done to fit on the page.

#+begin_src octave
function obj = backward(obj, data)
  totalTime = length(data);
            
  obj.backwardMessages=zeros(obj.noHidden,totalTime+1);           
            
  obj.backwardMessages(:,totalTime+1) = 1;
    for t=totalTime:-1:1,
      obj.backwardMessages(:,t) 
      = obj.transModel*obj.sensorModel{data(t)}*obj.backwardMessages(:,t+1);
      obj.backwardMessages(:,t) 
      = obj.backwardMessages(:,t)./sum(obj.backwardMessages(:,t));
    end
end
#+end_src

The result of running the our function on the given demo that forward was run on gives the following result:

#+result:
| 0.6469 | 0.5923 | 0.3763 | 0.6533 | 0.6273 | 1.0000 |
| 0.3531 | 0.4077 | 0.6237 | 0.3467 | 0.3727 | 1.0000 |

** HMM for exercise 1
#+begin_src octave
Trans = [ 0.8, 0.2; 
          0.2, 0.8 ];
Prio = [ 0.6, 0.4 ]';
Sens = [ 0.02, 0.21; 
         0.18, 0.49; 
         0.08, 0.09; 
         0.72, 0.21 ]';

% 1=yes+red, 2=yes+not red,  3=no+red, 4=no+not red
Dat = [ 4, 2, 1 ];

newhmm = HMM(Prio, Trans, Sens);
newhmm = newhmm.forward(Dat);
newhmm = newhmm.backward(Dat);

disp('Forward:');
disp(newhmm.forwardMessages);
disp('Backward:');
disp(newhmm.backwardMessages);
#+end_src

** Implementation of HMM
- Forward:
 | 0.8372 | 0.4643 | 0.0804 |
 | 0.1628 | 0.5357 | 0.9196 |

- Backward:
| 0.5325 | 0.2661 | 0.2522 | 1.0000 |
| 0.4675 | 0.7339 | 0.7478 | 1.0000 |
* Exercise 3
** Umbrella
- By calculating the likelihood of the models correctness and the one with the highest likelihood is the most reliable model:
  - 0.7 \cdot 0.7 \cdot 0.7 \cdot 0.3 \cdot 0.7 \cdot 0.7 \cdot 0.3 \cdot 0.3 \cdot 0.7 = 0.003176523
  - 0.6 \cdot 0.6 \cdot 0.6 \cdot 0.4 \cdot 0.8 \cdot 0.8 \cdot 0.2 \cdot 0.4 \cdot 0.8 = 0.003538944
- Matlab
#+begin_src octave
function p = SSP(obj, sequence)
  p = 1;
  for t=2:length(sequence),
    transition = obj.transModel(sequence(t-1),sequence(t));
    p = p * transition;                
  end
end
#+end_src
- MATLAB gave us the same results as the manual calculations of the likelihood.


** Water tank
- Kalman Filter
#+BEGIN_LATEX
\begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=2.5cm, semithick]

\node[state, minimum size=1.5cm] (B) {$WT_t$};
\node[state, minimum size=1.5cm] (C) [below of = B] {$S_t$};
\node[state, minimum size=1.5cm] (D) [right of = B] {$WT_{t+1}$};
\node[state, minimum size=1.5cm] (E) [right of = C] {$S_{t+1}$};

\path (B) edge (D)
      (B) edge (C)
      (D) edge (E);

\end{tikzpicture}
\begin{enumerate}
\item $WT_{t+1} = \mathcal{N}(WT_t,1)$
\item $S_t = \mathcal{N}(WT_t,1.5)$
\end{enumerate}
#+END_LATEX

- Filtered estimates:
  
